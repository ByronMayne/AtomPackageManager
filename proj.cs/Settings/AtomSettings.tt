<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
    // Create a list for our settings
    List<AtomSettings> m_Settings = new List<AtomSettings>();
    // Get our template path
    string templatePath = Host.TemplateFile;
    // replace the extension
    string xmlPath = templatePath.Replace(".tt", ".xml");
    // Create our document
    XmlDocument xDoc = new XmlDocument();
    // Load the value
    xDoc.Load(xmlPath);
    // Loop over our values
    foreach(XmlNode node in xDoc.DocumentElement.ChildNodes)
    {
        AtomSettings newSetting = new AtomSettings();
        newSetting.name = node.Attributes["name"].InnerText;
        newSetting.type = node.ChildNodes[0].InnerText;
        newSetting.comment = node.ChildNodes[1].InnerText;
        newSetting.isLocalScope = string.Compare(node.ChildNodes[2].InnerText, "true", StringComparison.OrdinalIgnoreCase) == 0;
        newSetting.defaultValue = node.ChildNodes[3].InnerText;
        m_Settings.Add(newSetting);
    }

	m_Settings.Sort( (lhs, rhs) => lhs.isLocalScope.CompareTo(rhs.isLocalScope));
#>
using UnityEngine;
using UnityEditor;

namespace AtomPackageManager
{
    [System.Serializable]
    public class AtomSettings
    {
<#    
	// Set our correct indent
	PushIndent("        ");
	// We want to write a header when we start using local values.
	bool hasStartedLocal = false;
	if(m_Settings.Count > 0)
    {
		WriteLine("[Header(\"Project Settings\")]");
    }

	// Fields
	for(int i = 0; i < m_Settings.Count; i++) 
	{  
		WriteField(m_Settings[i], ref hasStartedLocal);
    }
	WriteLine("");

	// Properties
	for(int i = 0; i < m_Settings.Count; i++) 
	{  
		WriteProperty(m_Settings[i]);
    }
	
	// Loading Function
	WriteLine("/// <summary>");
	WriteLine("/// Loads all the settings from disk.");
	WriteLine("/// </summary>");
	WriteLine("public void Load()");
	WriteLine("{");
	PushIndent("    ");
    {		
		for(int i = 0; i < m_Settings.Count; i++) 
		{  
			WriteLoadingEditorPrefs(m_Settings[i]);
		}
    }
	PopIndent();
	WriteLine("}");

	// Space
	WriteLine("");

	// Saving Function
	WriteLine("/// <summary>");
	WriteLine("/// Writes all the settings to disk.");
	WriteLine("/// </summary>");
	WriteLine("public void Save()");
	WriteLine("{");
	PushIndent("    ");
    {
		for(int i = 0; i < m_Settings.Count; i++) 
		{  
			WriteSavingEditorPrefs(m_Settings[i]);
		}
    }
	PopIndent();
	WriteLine("}");

	ClearIndent();
#>
    }
}

<#+ 
private void WriteField(AtomSettings setting, ref bool hasStartedLocal)
{
	// Writing the Field
	if(setting.isLocalScope)
    {
		if(!hasStartedLocal)
        {
			WriteLine("[Header(\"Local Values\")]");
			hasStartedLocal = true;
        }
    }
	else
    {
		WriteLine("[SerializeField]");	
    }

	Write("private ");
	Write(setting.type);
	Write(" m_");
	Write(setting.name);
	Write(" = ");
	Write(setting.defaultValue);
	WriteLine(";");
}

private void WriteProperty(AtomSettings setting)
{
	WriteLine("/// <summary>");
	Write("/// ");
	WriteLine(setting.comment);
	if(setting.isLocalScope)
    {
		WriteLine("// This value is only saved on your local machine.");
    }
	else
    {
		WriteLine("//  This value is saved to the project settings of Atom.");
    }
	WriteLine("/// </summary>");
	Write("public ");
	Write(setting.type);
	Write(" ");
	WriteLine(setting.name);
	WriteLine("{");
	PushIndent("    ");
    {
		Write("get { return m_");
		Write(setting.name);
		WriteLine("; }");
		Write("set { m_");
		Write(setting.name);
		WriteLine(" = value; }");
    }
	PopIndent();
	WriteLine("}");
}

public void WriteLoadingEditorPrefs(AtomSettings setting)
{
    Write(setting.name);
    Write(" = EditorPrefs.Get");

    if(string.Compare(setting.type, "bool", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Bool(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", defaultValue:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "string", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("String(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", defaultValue:@");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "float", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Float(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", defaultValue:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "int", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Int(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", defaultValue:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
}

public void WriteSavingEditorPrefs(AtomSettings setting)
{
    Write("EditorPrefs.Set");

    if(string.Compare(setting.type, "bool", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Bool(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", value:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "string", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("String(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", value:@");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "float", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Float(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", value:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
    else if(string.Compare(setting.type, "int", StringComparison.OrdinalIgnoreCase) == 0)
    {
        Write("Int(key:PlayerSettings.productName + \":");
        Write(setting.name);
        Write(":");
        Write(setting.type);
        Write("\", value:");
        Write(setting.defaultValue);
        WriteLine(");");
    }
}

public struct AtomSettings
{
    public string name;
    public string type;
    public string comment;
    public bool isLocalScope;
    public string defaultValue;
}
#>